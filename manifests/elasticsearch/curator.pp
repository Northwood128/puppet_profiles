## Class profile_elasticsearch::backup
#
# Description: Setup Curator to store index snapshots in S3
#
# Usage: Include profile_elasticsearch::backup in your roles

class profile::elasticsearch::backup (

  String $s3_bucket             = '',
  String $curator_config_file   = '',
  String $curator_actions_file  = '',
  Boolean $curator_backup_kibana = '',
  String $snapshot_file         = '',
  String $healthcheck_url       = '',
  String $snapshot_url          = '',
  String $snapshot_repo_alias   = '',
  String $snapshot_cmd          = '',
  String $index_prefix          = '',
  String $kibana_index_prefix   = '',
  String $wait_for_completion   = '',
  String $continue_if_exception = '',
  String $cron_hour             = '',
  String $cron_minute           = '',
  String $backup_days_wait      = '',
  String $del_days_wait         = '',
  Boolean $master_only           = '',
){

  package { 'curl':
    ensure => 'installed',
  }

  class { 'curator':
    ensure       => '5.4.1',
    config_file  => $curator_config_file,
    actions_file => $curator_actions_file,
    master_only  => $master_only,
  }

  exec { 'wait_for_elasticsearch':
    command => "bash -c 'until $(curl --output /dev/null --silent --head --fail ${healthcheck_url}); do sleep 3; done'",
    unless  => "curl --output /dev/null --silent --head --fail ${healthcheck_url}",
    path    => [ '/usr/local/bin','/usr/bin','/bin' ],
    notify  => Exec['set_s3_snapshot_repository'],
    require => Package['curl'],
  }

  exec { 'set_s3_snapshot_repository':
    command => $snapshot_cmd,
    unless  => "/usr/bin/test -f ${snapshot_file}",
    path    => ['/usr/local/bin','/usr/bin','/bin'],
    notify  => File['create_curator_file'],
    require => Exec['wait_for_elasticsearch'],
  }

  file { 'create_curator_file':
    ensure  => file,
    content => "#File generated by puppet\n#Snapshots to S3 are now active",
    mode    => '0755',
    owner   => $::elasticsearch::elasticsearch_user,
    group   => $::elasticsearch::elasticsearch_group,
    path    => $snapshot_file,
    require => Exec['set_s3_snapshot_repository'],
  }

  if $curator_backup_kibana {
    curator::action { 'kibana_snapshot_indices':
      order                 => 1,
      action                => 'snapshot',
      wait_for_completion   => $wait_for_completion,
      continue_if_exception => $continue_if_exception,
      repository            => $snapshot_repo_alias,
      filters               => [
        {
          'filtertype' => 'pattern',
          'value'      => $kibana_index_prefix,
          'kind'       => 'prefix ',
        }
      ]
    }
  }

  curator::action { 'logstash_snapshot_indices':
    order                 => 2,
    action                => 'snapshot',
    wait_for_completion   => $wait_for_completion,
    continue_if_exception => $continue_if_exception,
    repository            => $snapshot_repo_alias,
    filters               => [
      {
        'filtertype' => 'pattern',
        'value'      => $index_prefix,
        'kind'       => 'prefix',
      },
      {
        'filtertype' => 'age',
        'direction'  => 'older',
        'timestring' => '"%Y.%m.%d"',
        'unit'       => 'days',
        'unit_count' => $backup_days_wait,
        'source'     => 'name',
      }
    ]
  }

  curator::action { 'logstash_delete_indices':
    order                 => 3,
    action                => 'delete_indices',
    continue_if_exception => $continue_if_exception,
    filters               => [
      {
        'filtertype' => 'pattern',
        'value'      => $index_prefix,
        'kind'       => 'prefix',
      },
      {
        'filtertype' => 'age',
        'direction'  => 'older',
        'timestring' => '"%Y.%m.%d"',
        'unit'       => 'days',
        'unit_count' => $del_days_wait,
        'source'     => 'name',
      }
    ]
  }

  cron { 'curator_cron':
    ensure  => 'present',
    command => "/usr/local/bin/curator --config ${curator_config_file} ${curator_actions_file}",
    hour    => $cron_hour,
    minute  => $cron_minute,
    weekday => '*',
  }

}

